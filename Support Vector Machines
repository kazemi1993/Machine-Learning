# In[1]:


import seaborn as sns
iris = sns.load_dataset('iris')


# In[2]:


import pandas as pd
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')


# ** Create a pairplot of the data set. Which flower species seems to be the most separable?**

# In[3]:


# Setosa is the most separable. 
sns.pairplot(iris,hue='species',palette='Dark2')


# **Create a kde plot of sepal_length versus sepal width for setosa species of flower.**

# In[4]:


setosa = iris[iris['species']=='setosa']
sns.kdeplot( setosa['sepal_width'], setosa['sepal_length'],
                 cmap="plasma", shade=True, shade_lowest=False)


# # Train Test Split
# 
# ** Split your data into a training set and a testing set.**

# In[5]:


from sklearn.model_selection import train_test_split


# In[6]:


X = iris.drop('species',axis=1)
y = iris['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)


# # Train a Model
# 
# Now its time to train a Support Vector Machine Classifier. 
# 
# **Call the SVC() model from sklearn and fit the model to the training data.**

# In[7]:


from sklearn.svm import SVC


# In[8]:


svc_model = SVC()


# In[9]:


svc_model.fit(X_train,y_train)


# ## Model Evaluation
# 
# **Now get predictions from the model and create a confusion matrix and a classification report.**

# In[10]:


predictions = svc_model.predict(X_test)


# In[11]:


from sklearn.metrics import classification_report,confusion_matrix


# In[12]:


print(confusion_matrix(y_test,predictions))


# In[13]:


print(classification_report(y_test,predictions))


# Wow! You should have noticed that your model was pretty good! Let's see if we can tune the parameters to try to get even better (unlikely, and you probably would be satisfied with these results in real like because the data set is quite small, but I just want you to practice using GridSearch.

# ## Gridsearch Practice
# 
# ** Import GridsearchCV from SciKit Learn.**

# In[14]:


from sklearn.model_selection import GridSearchCV


# **Create a dictionary called param_grid and fill out some parameters for C and gamma.**

# In[15]:


param_grid = {'C': [0.1,1, 10, 100], 'gamma': [1,0.1,0.01,0.001]} 


# ** Create a GridSearchCV object and fit it to the training data.**

# In[16]:


grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=2)
grid.fit(X_train,y_train)


# ** Now take that grid model and create some predictions using the test set and create classification reports and confusion matrices for them. Were you able to improve?**

# In[17]:


grid_predictions = grid.predict(X_test)


# In[18]:


print(confusion_matrix(y_test,grid_predictions))


# In[19]:


print(classification_report(y_test,grid_predictions))

